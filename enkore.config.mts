import {
	createConfig,
	createTargetJSNodeOptions,
	createAutogeneratedFile
} from "enkore/spec/factory"

import fs from "node:fs"
import path from "node:path"

function getx509ExtensionNames(projectRoot: string) {
	const extensionsDir = path.join(
		projectRoot, "project", "src", "types", "x509Extensions"
	)

	let extensionNames: string[] = []

	for (const entry of fs.readdirSync(extensionsDir)) {
		if (!entry.endsWith(".mts")) continue

		extensionNames.push(entry.slice(0, -4))
	}

	return extensionNames
}

export const config: unknown = createConfig({
	target: {
		name: "js-node",
		options: createTargetJSNodeOptions({

		})
	},

	autogeneratedFiles: [
		createAutogeneratedFile({
			destinationPath: "project/src/types/x509ExtensionNames.mts",
			generator(session) {
				let code = `export type x509ExtensionNames = [\n`

				for (const extensionName of getx509ExtensionNames(session.project.root)) {
					code += `\t"${extensionName}",\n`
					code += `\t"!${extensionName}",\n`
				}

				code += `]\n`

				return code
			}
		}),
		createAutogeneratedFile({
			destinationPath: "project/src/getx509ExtensionNames.mts",
			generator(session) {
				let code = ``

				code += `import type {x509ExtensionNames} from "./types/x509ExtensionNames.mts"\n\n`
				code += `export function getx509ExtensionNames(): x509ExtensionNames {\n`

				code += `\treturn [\n`

				for (const extensionName of getx509ExtensionNames(session.project.root)) {
					code += `\t\t"${extensionName}",\n`
					code += `\t\t"!${extensionName}",\n`
				}

				code += `\t]\n`

				code += `}\n`

				return code
			}
		})
	]
})
